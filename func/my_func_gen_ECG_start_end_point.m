function align_output = my_func_gen_ECG_start_end_point(PPG_timestamp_start,...
                                PPG_timestamp_end,...
                                ECG_init_datetime,...
                                output_ECG_file_name,...
                                each_ECG_start_time,...
                                each_ECG_end_time,...
                                T_1_ECG_patch_name,...
                                ECG_path,...
                                fs_ECG,...
                                fs_PPG,...
                                LinearInterp_path)
% This function is to generate the ECG start and end point for this 30-sec PPG segment.


% 1. check if ECG start time is after this PPG segment start time.
ECG_init_datenum = datenum(ECG_init_datetime);
PPG_timestamp_start_datenum = datenum(PPG_timestamp_start);
ECG_delay_sec = (PPG_timestamp_start_datenum - ECG_init_datenum)* (24 * 60 * 60); 
% if ECG_delay_sec < 0, means ECG starts later than PPG, so we need to fill
% zero for ECG.
% if ECG_delay_sec > 0, means ECG starts earlier than PPG, so there will be
% enough ECG for PPG.

span_two_ECG_flag = false;
T_1_ECG_patch_name = T_1_ECG_patch_name;
T_2_ECG_one_hr_idx = NaN(1,1);
T_3_ECG_start_idx = NaN(1,1);
T_4_ECG_end_idx = NaN(1,1);
T_5_last_modify_time = NaT(1,1);
T_6_last_modify_person = cell(1,1);
T_7_last_base_point_PPG_file = [];
T_8_ECG_contain_empty = false; % whether ECG is partly empty.
T_9_pad_zero_front = false; % add zero at the beginning.
T_10_pad_zero_end = false; % add zero at the ending. (if ECG duration is less than 30 sec for that segment, this could happen)
T_11_fs_ECG = fs_ECG; % fs_ECG
if ECG_delay_sec > 0
    % ECG started earlier than PPG
    % There will be full 30-sec segment within the PPG.
    % find the same time portion in ECG time.
    
    % search for ECG segment
   T_9_pad_zero_front = false; % no need for zero padding in the front.
    [T_2_ECG_one_hr_idx,...
        span_two_ECG_flag,...
        T_9_pad_zero_front,...
        T_10_pad_zero_end,...
        T_4_ECG_end_idx,...
        T_3_ECG_start_idx,...
        T_8_ECG_contain_empty] = my_func_find_ECG_idx(ECG_path,...
                                    output_ECG_file_name,...
                                    each_ECG_start_time,...
                                    each_ECG_end_time,...
                                    T_2_ECG_one_hr_idx,...
                                    span_two_ECG_flag,...
                                    T_9_pad_zero_front,...
                                    T_10_pad_zero_end,...
                                    T_4_ECG_end_idx,...
                                    T_3_ECG_start_idx,...
                                    T_8_ECG_contain_empty,...
                                    PPG_timestamp_start,...
                                    PPG_timestamp_end,...
                                    ECG_init_datetime,...
                                    fs_PPG,...
                                    LinearInterp_path);
elseif ECG_delay_sec < 0
    % ECG start later than PPG.
    T_8_ECG_contain_empty = true;
    % check if delay is less than 30-sec
    if abs(ECG_delay_sec) < 30 && PPG_timestamp_end > ECG_init_datetime % needs to be absolute, and PPG end time greater than ECG start time.
       % part of reference ECG is empty, part of reference ECG is 
       T_9_pad_zero_front = true;
       
       T_3_ECG_start_idx = 1; % it should be the start of ECG.
        [T_2_ECG_one_hr_idx,...
            span_two_ECG_flag,...
            T_9_pad_zero_front,...
            T_10_pad_zero_end,...
            T_4_ECG_end_idx,...
            T_3_ECG_start_idx,...
            T_8_ECG_contain_empty] = my_func_find_ECG_idx(ECG_path,...
                                        output_ECG_file_name,...
                                        each_ECG_start_time,...
                                        each_ECG_end_time,...
                                        T_2_ECG_one_hr_idx,...
                                        span_two_ECG_flag,...
                                        T_9_pad_zero_front,...
                                        T_10_pad_zero_end,...
                                        T_4_ECG_end_idx,...
                                        T_3_ECG_start_idx,...
                                        T_8_ECG_contain_empty,...
                                    PPG_timestamp_start,...
                                    PPG_timestamp_end,...
                                    ECG_init_datetime,...
                                    fs_PPG,...
                                    LinearInterp_path);
    else
        % all of the reference ECG is empty.
        T_9_pad_zero_front = true;
        T_10_pad_zero_end = true;
        T_8_ECG_contain_empty = true;
    end
end

T_5_last_modify_time = datetime('now','TimeZone','America/New_York','Format','MM/dd/yyyy HH:mm:ss');
T_6_last_modify_person = {'Dong'};
T_7_last_base_point_PPG_file = {['ECG start time ', datestr(ECG_init_datetime,'mm/dd/yyyy HH:MM:SS.FFF')]};

    align_output = table(T_1_ECG_patch_name,...
                    T_2_ECG_one_hr_idx,...
                    T_3_ECG_start_idx,...
                    T_4_ECG_end_idx,...
                    T_5_last_modify_time,...
                    T_6_last_modify_person,...
                    T_7_last_base_point_PPG_file,...
                    T_8_ECG_contain_empty,...
                    T_9_pad_zero_front,...
                    T_10_pad_zero_end,...
                    T_11_fs_ECG);
                
end